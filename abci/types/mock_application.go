// Code generated by mockery. DO NOT EDIT.

package types

import mock "github.com/stretchr/testify/mock"

// MockApplication is an autogenerated mock type for the Application type
type MockApplication struct {
	mock.Mock
}

type MockApplication_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApplication) EXPECT() *MockApplication_Expecter {
	return &MockApplication_Expecter{mock: &_m.Mock}
}

// ApplySnapshotChunk provides a mock function with given fields: _a0
func (_m *MockApplication) ApplySnapshotChunk(_a0 RequestApplySnapshotChunk) ResponseApplySnapshotChunk {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ApplySnapshotChunk")
	}

	var r0 ResponseApplySnapshotChunk
	if rf, ok := ret.Get(0).(func(RequestApplySnapshotChunk) ResponseApplySnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseApplySnapshotChunk)
	}

	return r0
}

// MockApplication_ApplySnapshotChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplySnapshotChunk'
type MockApplication_ApplySnapshotChunk_Call struct {
	*mock.Call
}

// ApplySnapshotChunk is a helper method to define mock.On call
//   - _a0 RequestApplySnapshotChunk
func (_e *MockApplication_Expecter) ApplySnapshotChunk(_a0 interface{}) *MockApplication_ApplySnapshotChunk_Call {
	return &MockApplication_ApplySnapshotChunk_Call{Call: _e.mock.On("ApplySnapshotChunk", _a0)}
}

func (_c *MockApplication_ApplySnapshotChunk_Call) Run(run func(_a0 RequestApplySnapshotChunk)) *MockApplication_ApplySnapshotChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestApplySnapshotChunk))
	})
	return _c
}

func (_c *MockApplication_ApplySnapshotChunk_Call) Return(_a0 ResponseApplySnapshotChunk) *MockApplication_ApplySnapshotChunk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_ApplySnapshotChunk_Call) RunAndReturn(run func(RequestApplySnapshotChunk) ResponseApplySnapshotChunk) *MockApplication_ApplySnapshotChunk_Call {
	_c.Call.Return(run)
	return _c
}

// BeginBlock provides a mock function with given fields: _a0
func (_m *MockApplication) BeginBlock(_a0 RequestBeginBlock) ResponseBeginBlock {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for BeginBlock")
	}

	var r0 ResponseBeginBlock
	if rf, ok := ret.Get(0).(func(RequestBeginBlock) ResponseBeginBlock); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseBeginBlock)
	}

	return r0
}

// MockApplication_BeginBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginBlock'
type MockApplication_BeginBlock_Call struct {
	*mock.Call
}

// BeginBlock is a helper method to define mock.On call
//   - _a0 RequestBeginBlock
func (_e *MockApplication_Expecter) BeginBlock(_a0 interface{}) *MockApplication_BeginBlock_Call {
	return &MockApplication_BeginBlock_Call{Call: _e.mock.On("BeginBlock", _a0)}
}

func (_c *MockApplication_BeginBlock_Call) Run(run func(_a0 RequestBeginBlock)) *MockApplication_BeginBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestBeginBlock))
	})
	return _c
}

func (_c *MockApplication_BeginBlock_Call) Return(_a0 ResponseBeginBlock) *MockApplication_BeginBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_BeginBlock_Call) RunAndReturn(run func(RequestBeginBlock) ResponseBeginBlock) *MockApplication_BeginBlock_Call {
	_c.Call.Return(run)
	return _c
}

// CheckTx provides a mock function with given fields: _a0
func (_m *MockApplication) CheckTx(_a0 RequestCheckTx) ResponseCheckTx {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CheckTx")
	}

	var r0 ResponseCheckTx
	if rf, ok := ret.Get(0).(func(RequestCheckTx) ResponseCheckTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseCheckTx)
	}

	return r0
}

// MockApplication_CheckTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTx'
type MockApplication_CheckTx_Call struct {
	*mock.Call
}

// CheckTx is a helper method to define mock.On call
//   - _a0 RequestCheckTx
func (_e *MockApplication_Expecter) CheckTx(_a0 interface{}) *MockApplication_CheckTx_Call {
	return &MockApplication_CheckTx_Call{Call: _e.mock.On("CheckTx", _a0)}
}

func (_c *MockApplication_CheckTx_Call) Run(run func(_a0 RequestCheckTx)) *MockApplication_CheckTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestCheckTx))
	})
	return _c
}

func (_c *MockApplication_CheckTx_Call) Return(_a0 ResponseCheckTx) *MockApplication_CheckTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_CheckTx_Call) RunAndReturn(run func(RequestCheckTx) ResponseCheckTx) *MockApplication_CheckTx_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with no fields
func (_m *MockApplication) Commit() ResponseCommit {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 ResponseCommit
	if rf, ok := ret.Get(0).(func() ResponseCommit); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ResponseCommit)
	}

	return r0
}

// MockApplication_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockApplication_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockApplication_Expecter) Commit() *MockApplication_Commit_Call {
	return &MockApplication_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockApplication_Commit_Call) Run(run func()) *MockApplication_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_Commit_Call) Return(_a0 ResponseCommit) *MockApplication_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_Commit_Call) RunAndReturn(run func() ResponseCommit) *MockApplication_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// DeliverTx provides a mock function with given fields: _a0
func (_m *MockApplication) DeliverTx(_a0 RequestDeliverTx) ResponseDeliverTx {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeliverTx")
	}

	var r0 ResponseDeliverTx
	if rf, ok := ret.Get(0).(func(RequestDeliverTx) ResponseDeliverTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseDeliverTx)
	}

	return r0
}

// MockApplication_DeliverTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeliverTx'
type MockApplication_DeliverTx_Call struct {
	*mock.Call
}

// DeliverTx is a helper method to define mock.On call
//   - _a0 RequestDeliverTx
func (_e *MockApplication_Expecter) DeliverTx(_a0 interface{}) *MockApplication_DeliverTx_Call {
	return &MockApplication_DeliverTx_Call{Call: _e.mock.On("DeliverTx", _a0)}
}

func (_c *MockApplication_DeliverTx_Call) Run(run func(_a0 RequestDeliverTx)) *MockApplication_DeliverTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestDeliverTx))
	})
	return _c
}

func (_c *MockApplication_DeliverTx_Call) Return(_a0 ResponseDeliverTx) *MockApplication_DeliverTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_DeliverTx_Call) RunAndReturn(run func(RequestDeliverTx) ResponseDeliverTx) *MockApplication_DeliverTx_Call {
	_c.Call.Return(run)
	return _c
}

// EndBlock provides a mock function with given fields: _a0
func (_m *MockApplication) EndBlock(_a0 RequestEndBlock) ResponseEndBlock {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EndBlock")
	}

	var r0 ResponseEndBlock
	if rf, ok := ret.Get(0).(func(RequestEndBlock) ResponseEndBlock); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseEndBlock)
	}

	return r0
}

// MockApplication_EndBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndBlock'
type MockApplication_EndBlock_Call struct {
	*mock.Call
}

// EndBlock is a helper method to define mock.On call
//   - _a0 RequestEndBlock
func (_e *MockApplication_Expecter) EndBlock(_a0 interface{}) *MockApplication_EndBlock_Call {
	return &MockApplication_EndBlock_Call{Call: _e.mock.On("EndBlock", _a0)}
}

func (_c *MockApplication_EndBlock_Call) Run(run func(_a0 RequestEndBlock)) *MockApplication_EndBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestEndBlock))
	})
	return _c
}

func (_c *MockApplication_EndBlock_Call) Return(_a0 ResponseEndBlock) *MockApplication_EndBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_EndBlock_Call) RunAndReturn(run func(RequestEndBlock) ResponseEndBlock) *MockApplication_EndBlock_Call {
	_c.Call.Return(run)
	return _c
}

// EthQuery provides a mock function with given fields: _a0
func (_m *MockApplication) EthQuery(_a0 RequestEthQuery) ResponseEthQuery {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EthQuery")
	}

	var r0 ResponseEthQuery
	if rf, ok := ret.Get(0).(func(RequestEthQuery) ResponseEthQuery); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseEthQuery)
	}

	return r0
}

// MockApplication_EthQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EthQuery'
type MockApplication_EthQuery_Call struct {
	*mock.Call
}

// EthQuery is a helper method to define mock.On call
//   - _a0 RequestEthQuery
func (_e *MockApplication_Expecter) EthQuery(_a0 interface{}) *MockApplication_EthQuery_Call {
	return &MockApplication_EthQuery_Call{Call: _e.mock.On("EthQuery", _a0)}
}

func (_c *MockApplication_EthQuery_Call) Run(run func(_a0 RequestEthQuery)) *MockApplication_EthQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestEthQuery))
	})
	return _c
}

func (_c *MockApplication_EthQuery_Call) Return(_a0 ResponseEthQuery) *MockApplication_EthQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_EthQuery_Call) RunAndReturn(run func(RequestEthQuery) ResponseEthQuery) *MockApplication_EthQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: _a0
func (_m *MockApplication) Info(_a0 RequestInfo) ResponseInfo {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 ResponseInfo
	if rf, ok := ret.Get(0).(func(RequestInfo) ResponseInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseInfo)
	}

	return r0
}

// MockApplication_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockApplication_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - _a0 RequestInfo
func (_e *MockApplication_Expecter) Info(_a0 interface{}) *MockApplication_Info_Call {
	return &MockApplication_Info_Call{Call: _e.mock.On("Info", _a0)}
}

func (_c *MockApplication_Info_Call) Run(run func(_a0 RequestInfo)) *MockApplication_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestInfo))
	})
	return _c
}

func (_c *MockApplication_Info_Call) Return(_a0 ResponseInfo) *MockApplication_Info_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_Info_Call) RunAndReturn(run func(RequestInfo) ResponseInfo) *MockApplication_Info_Call {
	_c.Call.Return(run)
	return _c
}

// InitChain provides a mock function with given fields: _a0
func (_m *MockApplication) InitChain(_a0 RequestInitChain) ResponseInitChain {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InitChain")
	}

	var r0 ResponseInitChain
	if rf, ok := ret.Get(0).(func(RequestInitChain) ResponseInitChain); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseInitChain)
	}

	return r0
}

// MockApplication_InitChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitChain'
type MockApplication_InitChain_Call struct {
	*mock.Call
}

// InitChain is a helper method to define mock.On call
//   - _a0 RequestInitChain
func (_e *MockApplication_Expecter) InitChain(_a0 interface{}) *MockApplication_InitChain_Call {
	return &MockApplication_InitChain_Call{Call: _e.mock.On("InitChain", _a0)}
}

func (_c *MockApplication_InitChain_Call) Run(run func(_a0 RequestInitChain)) *MockApplication_InitChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestInitChain))
	})
	return _c
}

func (_c *MockApplication_InitChain_Call) Return(_a0 ResponseInitChain) *MockApplication_InitChain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_InitChain_Call) RunAndReturn(run func(RequestInitChain) ResponseInitChain) *MockApplication_InitChain_Call {
	_c.Call.Return(run)
	return _c
}

// ListSnapshots provides a mock function with given fields: _a0
func (_m *MockApplication) ListSnapshots(_a0 RequestListSnapshots) ResponseListSnapshots {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshots")
	}

	var r0 ResponseListSnapshots
	if rf, ok := ret.Get(0).(func(RequestListSnapshots) ResponseListSnapshots); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseListSnapshots)
	}

	return r0
}

// MockApplication_ListSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSnapshots'
type MockApplication_ListSnapshots_Call struct {
	*mock.Call
}

// ListSnapshots is a helper method to define mock.On call
//   - _a0 RequestListSnapshots
func (_e *MockApplication_Expecter) ListSnapshots(_a0 interface{}) *MockApplication_ListSnapshots_Call {
	return &MockApplication_ListSnapshots_Call{Call: _e.mock.On("ListSnapshots", _a0)}
}

func (_c *MockApplication_ListSnapshots_Call) Run(run func(_a0 RequestListSnapshots)) *MockApplication_ListSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestListSnapshots))
	})
	return _c
}

func (_c *MockApplication_ListSnapshots_Call) Return(_a0 ResponseListSnapshots) *MockApplication_ListSnapshots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_ListSnapshots_Call) RunAndReturn(run func(RequestListSnapshots) ResponseListSnapshots) *MockApplication_ListSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// LoadSnapshotChunk provides a mock function with given fields: _a0
func (_m *MockApplication) LoadSnapshotChunk(_a0 RequestLoadSnapshotChunk) ResponseLoadSnapshotChunk {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LoadSnapshotChunk")
	}

	var r0 ResponseLoadSnapshotChunk
	if rf, ok := ret.Get(0).(func(RequestLoadSnapshotChunk) ResponseLoadSnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseLoadSnapshotChunk)
	}

	return r0
}

// MockApplication_LoadSnapshotChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadSnapshotChunk'
type MockApplication_LoadSnapshotChunk_Call struct {
	*mock.Call
}

// LoadSnapshotChunk is a helper method to define mock.On call
//   - _a0 RequestLoadSnapshotChunk
func (_e *MockApplication_Expecter) LoadSnapshotChunk(_a0 interface{}) *MockApplication_LoadSnapshotChunk_Call {
	return &MockApplication_LoadSnapshotChunk_Call{Call: _e.mock.On("LoadSnapshotChunk", _a0)}
}

func (_c *MockApplication_LoadSnapshotChunk_Call) Run(run func(_a0 RequestLoadSnapshotChunk)) *MockApplication_LoadSnapshotChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestLoadSnapshotChunk))
	})
	return _c
}

func (_c *MockApplication_LoadSnapshotChunk_Call) Return(_a0 ResponseLoadSnapshotChunk) *MockApplication_LoadSnapshotChunk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_LoadSnapshotChunk_Call) RunAndReturn(run func(RequestLoadSnapshotChunk) ResponseLoadSnapshotChunk) *MockApplication_LoadSnapshotChunk_Call {
	_c.Call.Return(run)
	return _c
}

// OfferSnapshot provides a mock function with given fields: _a0
func (_m *MockApplication) OfferSnapshot(_a0 RequestOfferSnapshot) ResponseOfferSnapshot {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OfferSnapshot")
	}

	var r0 ResponseOfferSnapshot
	if rf, ok := ret.Get(0).(func(RequestOfferSnapshot) ResponseOfferSnapshot); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseOfferSnapshot)
	}

	return r0
}

// MockApplication_OfferSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OfferSnapshot'
type MockApplication_OfferSnapshot_Call struct {
	*mock.Call
}

// OfferSnapshot is a helper method to define mock.On call
//   - _a0 RequestOfferSnapshot
func (_e *MockApplication_Expecter) OfferSnapshot(_a0 interface{}) *MockApplication_OfferSnapshot_Call {
	return &MockApplication_OfferSnapshot_Call{Call: _e.mock.On("OfferSnapshot", _a0)}
}

func (_c *MockApplication_OfferSnapshot_Call) Run(run func(_a0 RequestOfferSnapshot)) *MockApplication_OfferSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestOfferSnapshot))
	})
	return _c
}

func (_c *MockApplication_OfferSnapshot_Call) Return(_a0 ResponseOfferSnapshot) *MockApplication_OfferSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_OfferSnapshot_Call) RunAndReturn(run func(RequestOfferSnapshot) ResponseOfferSnapshot) *MockApplication_OfferSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// PreBeginBlock provides a mock function with given fields: _a0
func (_m *MockApplication) PreBeginBlock(_a0 RequestPreBeginBlock) ResponsePrefetch {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PreBeginBlock")
	}

	var r0 ResponsePrefetch
	if rf, ok := ret.Get(0).(func(RequestPreBeginBlock) ResponsePrefetch); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponsePrefetch)
	}

	return r0
}

// MockApplication_PreBeginBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreBeginBlock'
type MockApplication_PreBeginBlock_Call struct {
	*mock.Call
}

// PreBeginBlock is a helper method to define mock.On call
//   - _a0 RequestPreBeginBlock
func (_e *MockApplication_Expecter) PreBeginBlock(_a0 interface{}) *MockApplication_PreBeginBlock_Call {
	return &MockApplication_PreBeginBlock_Call{Call: _e.mock.On("PreBeginBlock", _a0)}
}

func (_c *MockApplication_PreBeginBlock_Call) Run(run func(_a0 RequestPreBeginBlock)) *MockApplication_PreBeginBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestPreBeginBlock))
	})
	return _c
}

func (_c *MockApplication_PreBeginBlock_Call) Return(_a0 ResponsePrefetch) *MockApplication_PreBeginBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_PreBeginBlock_Call) RunAndReturn(run func(RequestPreBeginBlock) ResponsePrefetch) *MockApplication_PreBeginBlock_Call {
	_c.Call.Return(run)
	return _c
}

// PreCommit provides a mock function with given fields: _a0
func (_m *MockApplication) PreCommit(_a0 RequestPreCommit) ResponsePrefetch {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PreCommit")
	}

	var r0 ResponsePrefetch
	if rf, ok := ret.Get(0).(func(RequestPreCommit) ResponsePrefetch); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponsePrefetch)
	}

	return r0
}

// MockApplication_PreCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreCommit'
type MockApplication_PreCommit_Call struct {
	*mock.Call
}

// PreCommit is a helper method to define mock.On call
//   - _a0 RequestPreCommit
func (_e *MockApplication_Expecter) PreCommit(_a0 interface{}) *MockApplication_PreCommit_Call {
	return &MockApplication_PreCommit_Call{Call: _e.mock.On("PreCommit", _a0)}
}

func (_c *MockApplication_PreCommit_Call) Run(run func(_a0 RequestPreCommit)) *MockApplication_PreCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestPreCommit))
	})
	return _c
}

func (_c *MockApplication_PreCommit_Call) Return(_a0 ResponsePrefetch) *MockApplication_PreCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_PreCommit_Call) RunAndReturn(run func(RequestPreCommit) ResponsePrefetch) *MockApplication_PreCommit_Call {
	_c.Call.Return(run)
	return _c
}

// PreDeliverTx provides a mock function with given fields: _a0
func (_m *MockApplication) PreDeliverTx(_a0 RequestPreDeliverTx) {
	_m.Called(_a0)
}

// MockApplication_PreDeliverTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreDeliverTx'
type MockApplication_PreDeliverTx_Call struct {
	*mock.Call
}

// PreDeliverTx is a helper method to define mock.On call
//   - _a0 RequestPreDeliverTx
func (_e *MockApplication_Expecter) PreDeliverTx(_a0 interface{}) *MockApplication_PreDeliverTx_Call {
	return &MockApplication_PreDeliverTx_Call{Call: _e.mock.On("PreDeliverTx", _a0)}
}

func (_c *MockApplication_PreDeliverTx_Call) Run(run func(_a0 RequestPreDeliverTx)) *MockApplication_PreDeliverTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestPreDeliverTx))
	})
	return _c
}

func (_c *MockApplication_PreDeliverTx_Call) Return() *MockApplication_PreDeliverTx_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApplication_PreDeliverTx_Call) RunAndReturn(run func(RequestPreDeliverTx)) *MockApplication_PreDeliverTx_Call {
	_c.Run(run)
	return _c
}

// PrepareProposal provides a mock function with given fields: _a0
func (_m *MockApplication) PrepareProposal(_a0 RequestPrepareProposal) ResponsePrepareProposal {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrepareProposal")
	}

	var r0 ResponsePrepareProposal
	if rf, ok := ret.Get(0).(func(RequestPrepareProposal) ResponsePrepareProposal); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponsePrepareProposal)
	}

	return r0
}

// MockApplication_PrepareProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareProposal'
type MockApplication_PrepareProposal_Call struct {
	*mock.Call
}

// PrepareProposal is a helper method to define mock.On call
//   - _a0 RequestPrepareProposal
func (_e *MockApplication_Expecter) PrepareProposal(_a0 interface{}) *MockApplication_PrepareProposal_Call {
	return &MockApplication_PrepareProposal_Call{Call: _e.mock.On("PrepareProposal", _a0)}
}

func (_c *MockApplication_PrepareProposal_Call) Run(run func(_a0 RequestPrepareProposal)) *MockApplication_PrepareProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestPrepareProposal))
	})
	return _c
}

func (_c *MockApplication_PrepareProposal_Call) Return(_a0 ResponsePrepareProposal) *MockApplication_PrepareProposal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_PrepareProposal_Call) RunAndReturn(run func(RequestPrepareProposal) ResponsePrepareProposal) *MockApplication_PrepareProposal_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessProposal provides a mock function with given fields: _a0
func (_m *MockApplication) ProcessProposal(_a0 RequestProcessProposal) ResponseProcessProposal {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ProcessProposal")
	}

	var r0 ResponseProcessProposal
	if rf, ok := ret.Get(0).(func(RequestProcessProposal) ResponseProcessProposal); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseProcessProposal)
	}

	return r0
}

// MockApplication_ProcessProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessProposal'
type MockApplication_ProcessProposal_Call struct {
	*mock.Call
}

// ProcessProposal is a helper method to define mock.On call
//   - _a0 RequestProcessProposal
func (_e *MockApplication_Expecter) ProcessProposal(_a0 interface{}) *MockApplication_ProcessProposal_Call {
	return &MockApplication_ProcessProposal_Call{Call: _e.mock.On("ProcessProposal", _a0)}
}

func (_c *MockApplication_ProcessProposal_Call) Run(run func(_a0 RequestProcessProposal)) *MockApplication_ProcessProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestProcessProposal))
	})
	return _c
}

func (_c *MockApplication_ProcessProposal_Call) Return(_a0 ResponseProcessProposal) *MockApplication_ProcessProposal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_ProcessProposal_Call) RunAndReturn(run func(RequestProcessProposal) ResponseProcessProposal) *MockApplication_ProcessProposal_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0
func (_m *MockApplication) Query(_a0 RequestQuery) ResponseQuery {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 ResponseQuery
	if rf, ok := ret.Get(0).(func(RequestQuery) ResponseQuery); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ResponseQuery)
	}

	return r0
}

// MockApplication_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockApplication_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 RequestQuery
func (_e *MockApplication_Expecter) Query(_a0 interface{}) *MockApplication_Query_Call {
	return &MockApplication_Query_Call{Call: _e.mock.On("Query", _a0)}
}

func (_c *MockApplication_Query_Call) Run(run func(_a0 RequestQuery)) *MockApplication_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(RequestQuery))
	})
	return _c
}

func (_c *MockApplication_Query_Call) Return(_a0 ResponseQuery) *MockApplication_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_Query_Call) RunAndReturn(run func(RequestQuery) ResponseQuery) *MockApplication_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockApplication creates a new instance of MockApplication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApplication {
	mock := &MockApplication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
