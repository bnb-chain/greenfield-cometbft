// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/cometbft/cometbft/abci/types"
	mock "github.com/stretchr/testify/mock"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

type Application_Expecter struct {
	mock *mock.Mock
}

func (_m *Application) EXPECT() *Application_Expecter {
	return &Application_Expecter{mock: &_m.Mock}
}

// ApplySnapshotChunk provides a mock function with given fields: _a0
func (_m *Application) ApplySnapshotChunk(_a0 types.RequestApplySnapshotChunk) types.ResponseApplySnapshotChunk {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ApplySnapshotChunk")
	}

	var r0 types.ResponseApplySnapshotChunk
	if rf, ok := ret.Get(0).(func(types.RequestApplySnapshotChunk) types.ResponseApplySnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseApplySnapshotChunk)
	}

	return r0
}

// Application_ApplySnapshotChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplySnapshotChunk'
type Application_ApplySnapshotChunk_Call struct {
	*mock.Call
}

// ApplySnapshotChunk is a helper method to define mock.On call
//   - _a0 types.RequestApplySnapshotChunk
func (_e *Application_Expecter) ApplySnapshotChunk(_a0 interface{}) *Application_ApplySnapshotChunk_Call {
	return &Application_ApplySnapshotChunk_Call{Call: _e.mock.On("ApplySnapshotChunk", _a0)}
}

func (_c *Application_ApplySnapshotChunk_Call) Run(run func(_a0 types.RequestApplySnapshotChunk)) *Application_ApplySnapshotChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestApplySnapshotChunk))
	})
	return _c
}

func (_c *Application_ApplySnapshotChunk_Call) Return(_a0 types.ResponseApplySnapshotChunk) *Application_ApplySnapshotChunk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_ApplySnapshotChunk_Call) RunAndReturn(run func(types.RequestApplySnapshotChunk) types.ResponseApplySnapshotChunk) *Application_ApplySnapshotChunk_Call {
	_c.Call.Return(run)
	return _c
}

// BeginBlock provides a mock function with given fields: _a0
func (_m *Application) BeginBlock(_a0 types.RequestBeginBlock) types.ResponseBeginBlock {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for BeginBlock")
	}

	var r0 types.ResponseBeginBlock
	if rf, ok := ret.Get(0).(func(types.RequestBeginBlock) types.ResponseBeginBlock); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseBeginBlock)
	}

	return r0
}

// Application_BeginBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginBlock'
type Application_BeginBlock_Call struct {
	*mock.Call
}

// BeginBlock is a helper method to define mock.On call
//   - _a0 types.RequestBeginBlock
func (_e *Application_Expecter) BeginBlock(_a0 interface{}) *Application_BeginBlock_Call {
	return &Application_BeginBlock_Call{Call: _e.mock.On("BeginBlock", _a0)}
}

func (_c *Application_BeginBlock_Call) Run(run func(_a0 types.RequestBeginBlock)) *Application_BeginBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestBeginBlock))
	})
	return _c
}

func (_c *Application_BeginBlock_Call) Return(_a0 types.ResponseBeginBlock) *Application_BeginBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_BeginBlock_Call) RunAndReturn(run func(types.RequestBeginBlock) types.ResponseBeginBlock) *Application_BeginBlock_Call {
	_c.Call.Return(run)
	return _c
}

// CheckTx provides a mock function with given fields: _a0
func (_m *Application) CheckTx(_a0 types.RequestCheckTx) types.ResponseCheckTx {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CheckTx")
	}

	var r0 types.ResponseCheckTx
	if rf, ok := ret.Get(0).(func(types.RequestCheckTx) types.ResponseCheckTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseCheckTx)
	}

	return r0
}

// Application_CheckTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTx'
type Application_CheckTx_Call struct {
	*mock.Call
}

// CheckTx is a helper method to define mock.On call
//   - _a0 types.RequestCheckTx
func (_e *Application_Expecter) CheckTx(_a0 interface{}) *Application_CheckTx_Call {
	return &Application_CheckTx_Call{Call: _e.mock.On("CheckTx", _a0)}
}

func (_c *Application_CheckTx_Call) Run(run func(_a0 types.RequestCheckTx)) *Application_CheckTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestCheckTx))
	})
	return _c
}

func (_c *Application_CheckTx_Call) Return(_a0 types.ResponseCheckTx) *Application_CheckTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_CheckTx_Call) RunAndReturn(run func(types.RequestCheckTx) types.ResponseCheckTx) *Application_CheckTx_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with no fields
func (_m *Application) Commit() types.ResponseCommit {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 types.ResponseCommit
	if rf, ok := ret.Get(0).(func() types.ResponseCommit); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.ResponseCommit)
	}

	return r0
}

// Application_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Application_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *Application_Expecter) Commit() *Application_Commit_Call {
	return &Application_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *Application_Commit_Call) Run(run func()) *Application_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Application_Commit_Call) Return(_a0 types.ResponseCommit) *Application_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_Commit_Call) RunAndReturn(run func() types.ResponseCommit) *Application_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// DeliverTx provides a mock function with given fields: _a0
func (_m *Application) DeliverTx(_a0 types.RequestDeliverTx) types.ResponseDeliverTx {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeliverTx")
	}

	var r0 types.ResponseDeliverTx
	if rf, ok := ret.Get(0).(func(types.RequestDeliverTx) types.ResponseDeliverTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseDeliverTx)
	}

	return r0
}

// Application_DeliverTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeliverTx'
type Application_DeliverTx_Call struct {
	*mock.Call
}

// DeliverTx is a helper method to define mock.On call
//   - _a0 types.RequestDeliverTx
func (_e *Application_Expecter) DeliverTx(_a0 interface{}) *Application_DeliverTx_Call {
	return &Application_DeliverTx_Call{Call: _e.mock.On("DeliverTx", _a0)}
}

func (_c *Application_DeliverTx_Call) Run(run func(_a0 types.RequestDeliverTx)) *Application_DeliverTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestDeliverTx))
	})
	return _c
}

func (_c *Application_DeliverTx_Call) Return(_a0 types.ResponseDeliverTx) *Application_DeliverTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_DeliverTx_Call) RunAndReturn(run func(types.RequestDeliverTx) types.ResponseDeliverTx) *Application_DeliverTx_Call {
	_c.Call.Return(run)
	return _c
}

// EndBlock provides a mock function with given fields: _a0
func (_m *Application) EndBlock(_a0 types.RequestEndBlock) types.ResponseEndBlock {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EndBlock")
	}

	var r0 types.ResponseEndBlock
	if rf, ok := ret.Get(0).(func(types.RequestEndBlock) types.ResponseEndBlock); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseEndBlock)
	}

	return r0
}

// Application_EndBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndBlock'
type Application_EndBlock_Call struct {
	*mock.Call
}

// EndBlock is a helper method to define mock.On call
//   - _a0 types.RequestEndBlock
func (_e *Application_Expecter) EndBlock(_a0 interface{}) *Application_EndBlock_Call {
	return &Application_EndBlock_Call{Call: _e.mock.On("EndBlock", _a0)}
}

func (_c *Application_EndBlock_Call) Run(run func(_a0 types.RequestEndBlock)) *Application_EndBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestEndBlock))
	})
	return _c
}

func (_c *Application_EndBlock_Call) Return(_a0 types.ResponseEndBlock) *Application_EndBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_EndBlock_Call) RunAndReturn(run func(types.RequestEndBlock) types.ResponseEndBlock) *Application_EndBlock_Call {
	_c.Call.Return(run)
	return _c
}

// EthQuery provides a mock function with given fields: _a0
func (_m *Application) EthQuery(_a0 types.RequestEthQuery) types.ResponseEthQuery {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EthQuery")
	}

	var r0 types.ResponseEthQuery
	if rf, ok := ret.Get(0).(func(types.RequestEthQuery) types.ResponseEthQuery); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseEthQuery)
	}

	return r0
}

// Application_EthQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EthQuery'
type Application_EthQuery_Call struct {
	*mock.Call
}

// EthQuery is a helper method to define mock.On call
//   - _a0 types.RequestEthQuery
func (_e *Application_Expecter) EthQuery(_a0 interface{}) *Application_EthQuery_Call {
	return &Application_EthQuery_Call{Call: _e.mock.On("EthQuery", _a0)}
}

func (_c *Application_EthQuery_Call) Run(run func(_a0 types.RequestEthQuery)) *Application_EthQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestEthQuery))
	})
	return _c
}

func (_c *Application_EthQuery_Call) Return(_a0 types.ResponseEthQuery) *Application_EthQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_EthQuery_Call) RunAndReturn(run func(types.RequestEthQuery) types.ResponseEthQuery) *Application_EthQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: _a0
func (_m *Application) Info(_a0 types.RequestInfo) types.ResponseInfo {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 types.ResponseInfo
	if rf, ok := ret.Get(0).(func(types.RequestInfo) types.ResponseInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseInfo)
	}

	return r0
}

// Application_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Application_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - _a0 types.RequestInfo
func (_e *Application_Expecter) Info(_a0 interface{}) *Application_Info_Call {
	return &Application_Info_Call{Call: _e.mock.On("Info", _a0)}
}

func (_c *Application_Info_Call) Run(run func(_a0 types.RequestInfo)) *Application_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestInfo))
	})
	return _c
}

func (_c *Application_Info_Call) Return(_a0 types.ResponseInfo) *Application_Info_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_Info_Call) RunAndReturn(run func(types.RequestInfo) types.ResponseInfo) *Application_Info_Call {
	_c.Call.Return(run)
	return _c
}

// InitChain provides a mock function with given fields: _a0
func (_m *Application) InitChain(_a0 types.RequestInitChain) types.ResponseInitChain {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InitChain")
	}

	var r0 types.ResponseInitChain
	if rf, ok := ret.Get(0).(func(types.RequestInitChain) types.ResponseInitChain); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseInitChain)
	}

	return r0
}

// Application_InitChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitChain'
type Application_InitChain_Call struct {
	*mock.Call
}

// InitChain is a helper method to define mock.On call
//   - _a0 types.RequestInitChain
func (_e *Application_Expecter) InitChain(_a0 interface{}) *Application_InitChain_Call {
	return &Application_InitChain_Call{Call: _e.mock.On("InitChain", _a0)}
}

func (_c *Application_InitChain_Call) Run(run func(_a0 types.RequestInitChain)) *Application_InitChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestInitChain))
	})
	return _c
}

func (_c *Application_InitChain_Call) Return(_a0 types.ResponseInitChain) *Application_InitChain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_InitChain_Call) RunAndReturn(run func(types.RequestInitChain) types.ResponseInitChain) *Application_InitChain_Call {
	_c.Call.Return(run)
	return _c
}

// ListSnapshots provides a mock function with given fields: _a0
func (_m *Application) ListSnapshots(_a0 types.RequestListSnapshots) types.ResponseListSnapshots {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshots")
	}

	var r0 types.ResponseListSnapshots
	if rf, ok := ret.Get(0).(func(types.RequestListSnapshots) types.ResponseListSnapshots); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseListSnapshots)
	}

	return r0
}

// Application_ListSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSnapshots'
type Application_ListSnapshots_Call struct {
	*mock.Call
}

// ListSnapshots is a helper method to define mock.On call
//   - _a0 types.RequestListSnapshots
func (_e *Application_Expecter) ListSnapshots(_a0 interface{}) *Application_ListSnapshots_Call {
	return &Application_ListSnapshots_Call{Call: _e.mock.On("ListSnapshots", _a0)}
}

func (_c *Application_ListSnapshots_Call) Run(run func(_a0 types.RequestListSnapshots)) *Application_ListSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestListSnapshots))
	})
	return _c
}

func (_c *Application_ListSnapshots_Call) Return(_a0 types.ResponseListSnapshots) *Application_ListSnapshots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_ListSnapshots_Call) RunAndReturn(run func(types.RequestListSnapshots) types.ResponseListSnapshots) *Application_ListSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// LoadSnapshotChunk provides a mock function with given fields: _a0
func (_m *Application) LoadSnapshotChunk(_a0 types.RequestLoadSnapshotChunk) types.ResponseLoadSnapshotChunk {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LoadSnapshotChunk")
	}

	var r0 types.ResponseLoadSnapshotChunk
	if rf, ok := ret.Get(0).(func(types.RequestLoadSnapshotChunk) types.ResponseLoadSnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseLoadSnapshotChunk)
	}

	return r0
}

// Application_LoadSnapshotChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadSnapshotChunk'
type Application_LoadSnapshotChunk_Call struct {
	*mock.Call
}

// LoadSnapshotChunk is a helper method to define mock.On call
//   - _a0 types.RequestLoadSnapshotChunk
func (_e *Application_Expecter) LoadSnapshotChunk(_a0 interface{}) *Application_LoadSnapshotChunk_Call {
	return &Application_LoadSnapshotChunk_Call{Call: _e.mock.On("LoadSnapshotChunk", _a0)}
}

func (_c *Application_LoadSnapshotChunk_Call) Run(run func(_a0 types.RequestLoadSnapshotChunk)) *Application_LoadSnapshotChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestLoadSnapshotChunk))
	})
	return _c
}

func (_c *Application_LoadSnapshotChunk_Call) Return(_a0 types.ResponseLoadSnapshotChunk) *Application_LoadSnapshotChunk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_LoadSnapshotChunk_Call) RunAndReturn(run func(types.RequestLoadSnapshotChunk) types.ResponseLoadSnapshotChunk) *Application_LoadSnapshotChunk_Call {
	_c.Call.Return(run)
	return _c
}

// OfferSnapshot provides a mock function with given fields: _a0
func (_m *Application) OfferSnapshot(_a0 types.RequestOfferSnapshot) types.ResponseOfferSnapshot {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OfferSnapshot")
	}

	var r0 types.ResponseOfferSnapshot
	if rf, ok := ret.Get(0).(func(types.RequestOfferSnapshot) types.ResponseOfferSnapshot); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseOfferSnapshot)
	}

	return r0
}

// Application_OfferSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OfferSnapshot'
type Application_OfferSnapshot_Call struct {
	*mock.Call
}

// OfferSnapshot is a helper method to define mock.On call
//   - _a0 types.RequestOfferSnapshot
func (_e *Application_Expecter) OfferSnapshot(_a0 interface{}) *Application_OfferSnapshot_Call {
	return &Application_OfferSnapshot_Call{Call: _e.mock.On("OfferSnapshot", _a0)}
}

func (_c *Application_OfferSnapshot_Call) Run(run func(_a0 types.RequestOfferSnapshot)) *Application_OfferSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestOfferSnapshot))
	})
	return _c
}

func (_c *Application_OfferSnapshot_Call) Return(_a0 types.ResponseOfferSnapshot) *Application_OfferSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_OfferSnapshot_Call) RunAndReturn(run func(types.RequestOfferSnapshot) types.ResponseOfferSnapshot) *Application_OfferSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// PreBeginBlock provides a mock function with given fields: _a0
func (_m *Application) PreBeginBlock(_a0 types.RequestPreBeginBlock) types.ResponsePrefetch {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PreBeginBlock")
	}

	var r0 types.ResponsePrefetch
	if rf, ok := ret.Get(0).(func(types.RequestPreBeginBlock) types.ResponsePrefetch); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponsePrefetch)
	}

	return r0
}

// Application_PreBeginBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreBeginBlock'
type Application_PreBeginBlock_Call struct {
	*mock.Call
}

// PreBeginBlock is a helper method to define mock.On call
//   - _a0 types.RequestPreBeginBlock
func (_e *Application_Expecter) PreBeginBlock(_a0 interface{}) *Application_PreBeginBlock_Call {
	return &Application_PreBeginBlock_Call{Call: _e.mock.On("PreBeginBlock", _a0)}
}

func (_c *Application_PreBeginBlock_Call) Run(run func(_a0 types.RequestPreBeginBlock)) *Application_PreBeginBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestPreBeginBlock))
	})
	return _c
}

func (_c *Application_PreBeginBlock_Call) Return(_a0 types.ResponsePrefetch) *Application_PreBeginBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_PreBeginBlock_Call) RunAndReturn(run func(types.RequestPreBeginBlock) types.ResponsePrefetch) *Application_PreBeginBlock_Call {
	_c.Call.Return(run)
	return _c
}

// PreCommit provides a mock function with given fields: _a0
func (_m *Application) PreCommit(_a0 types.RequestPreCommit) types.ResponsePrefetch {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PreCommit")
	}

	var r0 types.ResponsePrefetch
	if rf, ok := ret.Get(0).(func(types.RequestPreCommit) types.ResponsePrefetch); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponsePrefetch)
	}

	return r0
}

// Application_PreCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreCommit'
type Application_PreCommit_Call struct {
	*mock.Call
}

// PreCommit is a helper method to define mock.On call
//   - _a0 types.RequestPreCommit
func (_e *Application_Expecter) PreCommit(_a0 interface{}) *Application_PreCommit_Call {
	return &Application_PreCommit_Call{Call: _e.mock.On("PreCommit", _a0)}
}

func (_c *Application_PreCommit_Call) Run(run func(_a0 types.RequestPreCommit)) *Application_PreCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestPreCommit))
	})
	return _c
}

func (_c *Application_PreCommit_Call) Return(_a0 types.ResponsePrefetch) *Application_PreCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_PreCommit_Call) RunAndReturn(run func(types.RequestPreCommit) types.ResponsePrefetch) *Application_PreCommit_Call {
	_c.Call.Return(run)
	return _c
}

// PreDeliverTx provides a mock function with given fields: _a0
func (_m *Application) PreDeliverTx(_a0 types.RequestPreDeliverTx) {
	_m.Called(_a0)
}

// Application_PreDeliverTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreDeliverTx'
type Application_PreDeliverTx_Call struct {
	*mock.Call
}

// PreDeliverTx is a helper method to define mock.On call
//   - _a0 types.RequestPreDeliverTx
func (_e *Application_Expecter) PreDeliverTx(_a0 interface{}) *Application_PreDeliverTx_Call {
	return &Application_PreDeliverTx_Call{Call: _e.mock.On("PreDeliverTx", _a0)}
}

func (_c *Application_PreDeliverTx_Call) Run(run func(_a0 types.RequestPreDeliverTx)) *Application_PreDeliverTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestPreDeliverTx))
	})
	return _c
}

func (_c *Application_PreDeliverTx_Call) Return() *Application_PreDeliverTx_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_PreDeliverTx_Call) RunAndReturn(run func(types.RequestPreDeliverTx)) *Application_PreDeliverTx_Call {
	_c.Run(run)
	return _c
}

// PrepareProposal provides a mock function with given fields: _a0
func (_m *Application) PrepareProposal(_a0 types.RequestPrepareProposal) types.ResponsePrepareProposal {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrepareProposal")
	}

	var r0 types.ResponsePrepareProposal
	if rf, ok := ret.Get(0).(func(types.RequestPrepareProposal) types.ResponsePrepareProposal); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponsePrepareProposal)
	}

	return r0
}

// Application_PrepareProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareProposal'
type Application_PrepareProposal_Call struct {
	*mock.Call
}

// PrepareProposal is a helper method to define mock.On call
//   - _a0 types.RequestPrepareProposal
func (_e *Application_Expecter) PrepareProposal(_a0 interface{}) *Application_PrepareProposal_Call {
	return &Application_PrepareProposal_Call{Call: _e.mock.On("PrepareProposal", _a0)}
}

func (_c *Application_PrepareProposal_Call) Run(run func(_a0 types.RequestPrepareProposal)) *Application_PrepareProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestPrepareProposal))
	})
	return _c
}

func (_c *Application_PrepareProposal_Call) Return(_a0 types.ResponsePrepareProposal) *Application_PrepareProposal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_PrepareProposal_Call) RunAndReturn(run func(types.RequestPrepareProposal) types.ResponsePrepareProposal) *Application_PrepareProposal_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessProposal provides a mock function with given fields: _a0
func (_m *Application) ProcessProposal(_a0 types.RequestProcessProposal) types.ResponseProcessProposal {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ProcessProposal")
	}

	var r0 types.ResponseProcessProposal
	if rf, ok := ret.Get(0).(func(types.RequestProcessProposal) types.ResponseProcessProposal); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseProcessProposal)
	}

	return r0
}

// Application_ProcessProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessProposal'
type Application_ProcessProposal_Call struct {
	*mock.Call
}

// ProcessProposal is a helper method to define mock.On call
//   - _a0 types.RequestProcessProposal
func (_e *Application_Expecter) ProcessProposal(_a0 interface{}) *Application_ProcessProposal_Call {
	return &Application_ProcessProposal_Call{Call: _e.mock.On("ProcessProposal", _a0)}
}

func (_c *Application_ProcessProposal_Call) Run(run func(_a0 types.RequestProcessProposal)) *Application_ProcessProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestProcessProposal))
	})
	return _c
}

func (_c *Application_ProcessProposal_Call) Return(_a0 types.ResponseProcessProposal) *Application_ProcessProposal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_ProcessProposal_Call) RunAndReturn(run func(types.RequestProcessProposal) types.ResponseProcessProposal) *Application_ProcessProposal_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0
func (_m *Application) Query(_a0 types.RequestQuery) types.ResponseQuery {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 types.ResponseQuery
	if rf, ok := ret.Get(0).(func(types.RequestQuery) types.ResponseQuery); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseQuery)
	}

	return r0
}

// Application_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Application_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 types.RequestQuery
func (_e *Application_Expecter) Query(_a0 interface{}) *Application_Query_Call {
	return &Application_Query_Call{Call: _e.mock.On("Query", _a0)}
}

func (_c *Application_Query_Call) Run(run func(_a0 types.RequestQuery)) *Application_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestQuery))
	})
	return _c
}

func (_c *Application_Query_Call) Return(_a0 types.ResponseQuery) *Application_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_Query_Call) RunAndReturn(run func(types.RequestQuery) types.ResponseQuery) *Application_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
