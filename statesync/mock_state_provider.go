// Code generated by mockery. DO NOT EDIT.

package statesync

import (
	context "context"

	state "github.com/cometbft/cometbft/state"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cometbft/cometbft/types"
)

// MockStateProvider is an autogenerated mock type for the StateProvider type
type MockStateProvider struct {
	mock.Mock
}

type MockStateProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateProvider) EXPECT() *MockStateProvider_Expecter {
	return &MockStateProvider_Expecter{mock: &_m.Mock}
}

// AppHash provides a mock function with given fields: ctx, height
func (_m *MockStateProvider) AppHash(ctx context.Context, height uint64) ([]byte, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for AppHash")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]byte, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []byte); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateProvider_AppHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppHash'
type MockStateProvider_AppHash_Call struct {
	*mock.Call
}

// AppHash is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
func (_e *MockStateProvider_Expecter) AppHash(ctx interface{}, height interface{}) *MockStateProvider_AppHash_Call {
	return &MockStateProvider_AppHash_Call{Call: _e.mock.On("AppHash", ctx, height)}
}

func (_c *MockStateProvider_AppHash_Call) Run(run func(ctx context.Context, height uint64)) *MockStateProvider_AppHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockStateProvider_AppHash_Call) Return(_a0 []byte, _a1 error) *MockStateProvider_AppHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateProvider_AppHash_Call) RunAndReturn(run func(context.Context, uint64) ([]byte, error)) *MockStateProvider_AppHash_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx, height
func (_m *MockStateProvider) Commit(ctx context.Context, height uint64) (*types.Commit, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 *types.Commit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*types.Commit, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *types.Commit); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Commit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateProvider_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockStateProvider_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
func (_e *MockStateProvider_Expecter) Commit(ctx interface{}, height interface{}) *MockStateProvider_Commit_Call {
	return &MockStateProvider_Commit_Call{Call: _e.mock.On("Commit", ctx, height)}
}

func (_c *MockStateProvider_Commit_Call) Run(run func(ctx context.Context, height uint64)) *MockStateProvider_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockStateProvider_Commit_Call) Return(_a0 *types.Commit, _a1 error) *MockStateProvider_Commit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateProvider_Commit_Call) RunAndReturn(run func(context.Context, uint64) (*types.Commit, error)) *MockStateProvider_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function with given fields: ctx, height
func (_m *MockStateProvider) State(ctx context.Context, height uint64) (state.State, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 state.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (state.State, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) state.State); ok {
		r0 = rf(ctx, height)
	} else {
		r0 = ret.Get(0).(state.State)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateProvider_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type MockStateProvider_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
func (_e *MockStateProvider_Expecter) State(ctx interface{}, height interface{}) *MockStateProvider_State_Call {
	return &MockStateProvider_State_Call{Call: _e.mock.On("State", ctx, height)}
}

func (_c *MockStateProvider_State_Call) Run(run func(ctx context.Context, height uint64)) *MockStateProvider_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockStateProvider_State_Call) Return(_a0 state.State, _a1 error) *MockStateProvider_State_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateProvider_State_Call) RunAndReturn(run func(context.Context, uint64) (state.State, error)) *MockStateProvider_State_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStateProvider creates a new instance of MockStateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateProvider {
	mock := &MockStateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
