// Code generated by mockery. DO NOT EDIT.

package evidence

import (
	types "github.com/cometbft/cometbft/types"
	mock "github.com/stretchr/testify/mock"
)

// MockBlockStore is an autogenerated mock type for the BlockStore type
type MockBlockStore struct {
	mock.Mock
}

type MockBlockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockStore) EXPECT() *MockBlockStore_Expecter {
	return &MockBlockStore_Expecter{mock: &_m.Mock}
}

// Height provides a mock function with no fields
func (_m *MockBlockStore) Height() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Height")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockBlockStore_Height_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Height'
type MockBlockStore_Height_Call struct {
	*mock.Call
}

// Height is a helper method to define mock.On call
func (_e *MockBlockStore_Expecter) Height() *MockBlockStore_Height_Call {
	return &MockBlockStore_Height_Call{Call: _e.mock.On("Height")}
}

func (_c *MockBlockStore_Height_Call) Run(run func()) *MockBlockStore_Height_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlockStore_Height_Call) Return(_a0 int64) *MockBlockStore_Height_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockStore_Height_Call) RunAndReturn(run func() int64) *MockBlockStore_Height_Call {
	_c.Call.Return(run)
	return _c
}

// LoadBlockCommit provides a mock function with given fields: height
func (_m *MockBlockStore) LoadBlockCommit(height int64) *types.Commit {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for LoadBlockCommit")
	}

	var r0 *types.Commit
	if rf, ok := ret.Get(0).(func(int64) *types.Commit); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Commit)
		}
	}

	return r0
}

// MockBlockStore_LoadBlockCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadBlockCommit'
type MockBlockStore_LoadBlockCommit_Call struct {
	*mock.Call
}

// LoadBlockCommit is a helper method to define mock.On call
//   - height int64
func (_e *MockBlockStore_Expecter) LoadBlockCommit(height interface{}) *MockBlockStore_LoadBlockCommit_Call {
	return &MockBlockStore_LoadBlockCommit_Call{Call: _e.mock.On("LoadBlockCommit", height)}
}

func (_c *MockBlockStore_LoadBlockCommit_Call) Run(run func(height int64)) *MockBlockStore_LoadBlockCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockBlockStore_LoadBlockCommit_Call) Return(_a0 *types.Commit) *MockBlockStore_LoadBlockCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockStore_LoadBlockCommit_Call) RunAndReturn(run func(int64) *types.Commit) *MockBlockStore_LoadBlockCommit_Call {
	_c.Call.Return(run)
	return _c
}

// LoadBlockMeta provides a mock function with given fields: height
func (_m *MockBlockStore) LoadBlockMeta(height int64) *types.BlockMeta {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for LoadBlockMeta")
	}

	var r0 *types.BlockMeta
	if rf, ok := ret.Get(0).(func(int64) *types.BlockMeta); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BlockMeta)
		}
	}

	return r0
}

// MockBlockStore_LoadBlockMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadBlockMeta'
type MockBlockStore_LoadBlockMeta_Call struct {
	*mock.Call
}

// LoadBlockMeta is a helper method to define mock.On call
//   - height int64
func (_e *MockBlockStore_Expecter) LoadBlockMeta(height interface{}) *MockBlockStore_LoadBlockMeta_Call {
	return &MockBlockStore_LoadBlockMeta_Call{Call: _e.mock.On("LoadBlockMeta", height)}
}

func (_c *MockBlockStore_LoadBlockMeta_Call) Run(run func(height int64)) *MockBlockStore_LoadBlockMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockBlockStore_LoadBlockMeta_Call) Return(_a0 *types.BlockMeta) *MockBlockStore_LoadBlockMeta_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockStore_LoadBlockMeta_Call) RunAndReturn(run func(int64) *types.BlockMeta) *MockBlockStore_LoadBlockMeta_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockStore creates a new instance of MockBlockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockStore {
	mock := &MockBlockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
