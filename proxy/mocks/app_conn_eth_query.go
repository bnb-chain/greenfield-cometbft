// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/cometbft/cometbft/abci/types"
)

// AppConnEthQuery is an autogenerated mock type for the AppConnEthQuery type
type AppConnEthQuery struct {
	mock.Mock
}

type AppConnEthQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *AppConnEthQuery) EXPECT() *AppConnEthQuery_Expecter {
	return &AppConnEthQuery_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with no fields
func (_m *AppConnEthQuery) Error() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppConnEthQuery_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type AppConnEthQuery_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *AppConnEthQuery_Expecter) Error() *AppConnEthQuery_Error_Call {
	return &AppConnEthQuery_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *AppConnEthQuery_Error_Call) Run(run func()) *AppConnEthQuery_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AppConnEthQuery_Error_Call) Return(_a0 error) *AppConnEthQuery_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppConnEthQuery_Error_Call) RunAndReturn(run func() error) *AppConnEthQuery_Error_Call {
	_c.Call.Return(run)
	return _c
}

// EthQuerySync provides a mock function with given fields: query
func (_m *AppConnEthQuery) EthQuerySync(query types.RequestEthQuery) (*types.ResponseEthQuery, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for EthQuerySync")
	}

	var r0 *types.ResponseEthQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(types.RequestEthQuery) (*types.ResponseEthQuery, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(types.RequestEthQuery) *types.ResponseEthQuery); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEthQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(types.RequestEthQuery) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnEthQuery_EthQuerySync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EthQuerySync'
type AppConnEthQuery_EthQuerySync_Call struct {
	*mock.Call
}

// EthQuerySync is a helper method to define mock.On call
//   - query types.RequestEthQuery
func (_e *AppConnEthQuery_Expecter) EthQuerySync(query interface{}) *AppConnEthQuery_EthQuerySync_Call {
	return &AppConnEthQuery_EthQuerySync_Call{Call: _e.mock.On("EthQuerySync", query)}
}

func (_c *AppConnEthQuery_EthQuerySync_Call) Run(run func(query types.RequestEthQuery)) *AppConnEthQuery_EthQuerySync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestEthQuery))
	})
	return _c
}

func (_c *AppConnEthQuery_EthQuerySync_Call) Return(_a0 *types.ResponseEthQuery, _a1 error) *AppConnEthQuery_EthQuerySync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnEthQuery_EthQuerySync_Call) RunAndReturn(run func(types.RequestEthQuery) (*types.ResponseEthQuery, error)) *AppConnEthQuery_EthQuerySync_Call {
	_c.Call.Return(run)
	return _c
}

// NewAppConnEthQuery creates a new instance of AppConnEthQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppConnEthQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppConnEthQuery {
	mock := &AppConnEthQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
