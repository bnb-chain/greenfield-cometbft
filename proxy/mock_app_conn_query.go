// Code generated by mockery. DO NOT EDIT.

package proxy

import (
	types "github.com/cometbft/cometbft/abci/types"
	mock "github.com/stretchr/testify/mock"
)

// MockAppConnQuery is an autogenerated mock type for the AppConnQuery type
type MockAppConnQuery struct {
	mock.Mock
}

type MockAppConnQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppConnQuery) EXPECT() *MockAppConnQuery_Expecter {
	return &MockAppConnQuery_Expecter{mock: &_m.Mock}
}

// EchoSync provides a mock function with given fields: _a0
func (_m *MockAppConnQuery) EchoSync(_a0 string) (*types.ResponseEcho, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EchoSync")
	}

	var r0 *types.ResponseEcho
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.ResponseEcho, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *types.ResponseEcho); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseEcho)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppConnQuery_EchoSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EchoSync'
type MockAppConnQuery_EchoSync_Call struct {
	*mock.Call
}

// EchoSync is a helper method to define mock.On call
//   - _a0 string
func (_e *MockAppConnQuery_Expecter) EchoSync(_a0 interface{}) *MockAppConnQuery_EchoSync_Call {
	return &MockAppConnQuery_EchoSync_Call{Call: _e.mock.On("EchoSync", _a0)}
}

func (_c *MockAppConnQuery_EchoSync_Call) Run(run func(_a0 string)) *MockAppConnQuery_EchoSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAppConnQuery_EchoSync_Call) Return(_a0 *types.ResponseEcho, _a1 error) *MockAppConnQuery_EchoSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppConnQuery_EchoSync_Call) RunAndReturn(run func(string) (*types.ResponseEcho, error)) *MockAppConnQuery_EchoSync_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with no fields
func (_m *MockAppConnQuery) Error() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAppConnQuery_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockAppConnQuery_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockAppConnQuery_Expecter) Error() *MockAppConnQuery_Error_Call {
	return &MockAppConnQuery_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockAppConnQuery_Error_Call) Run(run func()) *MockAppConnQuery_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppConnQuery_Error_Call) Return(_a0 error) *MockAppConnQuery_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConnQuery_Error_Call) RunAndReturn(run func() error) *MockAppConnQuery_Error_Call {
	_c.Call.Return(run)
	return _c
}

// InfoSync provides a mock function with given fields: _a0
func (_m *MockAppConnQuery) InfoSync(_a0 types.RequestInfo) (*types.ResponseInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InfoSync")
	}

	var r0 *types.ResponseInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(types.RequestInfo) (*types.ResponseInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.RequestInfo) *types.ResponseInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(types.RequestInfo) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppConnQuery_InfoSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InfoSync'
type MockAppConnQuery_InfoSync_Call struct {
	*mock.Call
}

// InfoSync is a helper method to define mock.On call
//   - _a0 types.RequestInfo
func (_e *MockAppConnQuery_Expecter) InfoSync(_a0 interface{}) *MockAppConnQuery_InfoSync_Call {
	return &MockAppConnQuery_InfoSync_Call{Call: _e.mock.On("InfoSync", _a0)}
}

func (_c *MockAppConnQuery_InfoSync_Call) Run(run func(_a0 types.RequestInfo)) *MockAppConnQuery_InfoSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestInfo))
	})
	return _c
}

func (_c *MockAppConnQuery_InfoSync_Call) Return(_a0 *types.ResponseInfo, _a1 error) *MockAppConnQuery_InfoSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppConnQuery_InfoSync_Call) RunAndReturn(run func(types.RequestInfo) (*types.ResponseInfo, error)) *MockAppConnQuery_InfoSync_Call {
	_c.Call.Return(run)
	return _c
}

// QuerySync provides a mock function with given fields: _a0
func (_m *MockAppConnQuery) QuerySync(_a0 types.RequestQuery) (*types.ResponseQuery, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for QuerySync")
	}

	var r0 *types.ResponseQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(types.RequestQuery) (*types.ResponseQuery, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.RequestQuery) *types.ResponseQuery); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(types.RequestQuery) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAppConnQuery_QuerySync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuerySync'
type MockAppConnQuery_QuerySync_Call struct {
	*mock.Call
}

// QuerySync is a helper method to define mock.On call
//   - _a0 types.RequestQuery
func (_e *MockAppConnQuery_Expecter) QuerySync(_a0 interface{}) *MockAppConnQuery_QuerySync_Call {
	return &MockAppConnQuery_QuerySync_Call{Call: _e.mock.On("QuerySync", _a0)}
}

func (_c *MockAppConnQuery_QuerySync_Call) Run(run func(_a0 types.RequestQuery)) *MockAppConnQuery_QuerySync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RequestQuery))
	})
	return _c
}

func (_c *MockAppConnQuery_QuerySync_Call) Return(_a0 *types.ResponseQuery, _a1 error) *MockAppConnQuery_QuerySync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAppConnQuery_QuerySync_Call) RunAndReturn(run func(types.RequestQuery) (*types.ResponseQuery, error)) *MockAppConnQuery_QuerySync_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAppConnQuery creates a new instance of MockAppConnQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppConnQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppConnQuery {
	mock := &MockAppConnQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
