// Code generated by mockery. DO NOT EDIT.

package state

import (
	types "github.com/cometbft/cometbft/types"
	mock "github.com/stretchr/testify/mock"
)

// MockEvidencePool is an autogenerated mock type for the EvidencePool type
type MockEvidencePool struct {
	mock.Mock
}

type MockEvidencePool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvidencePool) EXPECT() *MockEvidencePool_Expecter {
	return &MockEvidencePool_Expecter{mock: &_m.Mock}
}

// AddEvidence provides a mock function with given fields: _a0
func (_m *MockEvidencePool) AddEvidence(_a0 types.Evidence) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddEvidence")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Evidence) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEvidencePool_AddEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvidence'
type MockEvidencePool_AddEvidence_Call struct {
	*mock.Call
}

// AddEvidence is a helper method to define mock.On call
//   - _a0 types.Evidence
func (_e *MockEvidencePool_Expecter) AddEvidence(_a0 interface{}) *MockEvidencePool_AddEvidence_Call {
	return &MockEvidencePool_AddEvidence_Call{Call: _e.mock.On("AddEvidence", _a0)}
}

func (_c *MockEvidencePool_AddEvidence_Call) Run(run func(_a0 types.Evidence)) *MockEvidencePool_AddEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Evidence))
	})
	return _c
}

func (_c *MockEvidencePool_AddEvidence_Call) Return(_a0 error) *MockEvidencePool_AddEvidence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvidencePool_AddEvidence_Call) RunAndReturn(run func(types.Evidence) error) *MockEvidencePool_AddEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// CheckEvidence provides a mock function with given fields: _a0
func (_m *MockEvidencePool) CheckEvidence(_a0 types.EvidenceList) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CheckEvidence")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.EvidenceList) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEvidencePool_CheckEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEvidence'
type MockEvidencePool_CheckEvidence_Call struct {
	*mock.Call
}

// CheckEvidence is a helper method to define mock.On call
//   - _a0 types.EvidenceList
func (_e *MockEvidencePool_Expecter) CheckEvidence(_a0 interface{}) *MockEvidencePool_CheckEvidence_Call {
	return &MockEvidencePool_CheckEvidence_Call{Call: _e.mock.On("CheckEvidence", _a0)}
}

func (_c *MockEvidencePool_CheckEvidence_Call) Run(run func(_a0 types.EvidenceList)) *MockEvidencePool_CheckEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.EvidenceList))
	})
	return _c
}

func (_c *MockEvidencePool_CheckEvidence_Call) Return(_a0 error) *MockEvidencePool_CheckEvidence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvidencePool_CheckEvidence_Call) RunAndReturn(run func(types.EvidenceList) error) *MockEvidencePool_CheckEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// PendingEvidence provides a mock function with given fields: maxBytes
func (_m *MockEvidencePool) PendingEvidence(maxBytes int64) ([]types.Evidence, int64) {
	ret := _m.Called(maxBytes)

	if len(ret) == 0 {
		panic("no return value specified for PendingEvidence")
	}

	var r0 []types.Evidence
	var r1 int64
	if rf, ok := ret.Get(0).(func(int64) ([]types.Evidence, int64)); ok {
		return rf(maxBytes)
	}
	if rf, ok := ret.Get(0).(func(int64) []types.Evidence); ok {
		r0 = rf(maxBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Evidence)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) int64); ok {
		r1 = rf(maxBytes)
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

// MockEvidencePool_PendingEvidence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PendingEvidence'
type MockEvidencePool_PendingEvidence_Call struct {
	*mock.Call
}

// PendingEvidence is a helper method to define mock.On call
//   - maxBytes int64
func (_e *MockEvidencePool_Expecter) PendingEvidence(maxBytes interface{}) *MockEvidencePool_PendingEvidence_Call {
	return &MockEvidencePool_PendingEvidence_Call{Call: _e.mock.On("PendingEvidence", maxBytes)}
}

func (_c *MockEvidencePool_PendingEvidence_Call) Run(run func(maxBytes int64)) *MockEvidencePool_PendingEvidence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockEvidencePool_PendingEvidence_Call) Return(ev []types.Evidence, size int64) *MockEvidencePool_PendingEvidence_Call {
	_c.Call.Return(ev, size)
	return _c
}

func (_c *MockEvidencePool_PendingEvidence_Call) RunAndReturn(run func(int64) ([]types.Evidence, int64)) *MockEvidencePool_PendingEvidence_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockEvidencePool) Update(_a0 State, _a1 types.EvidenceList) {
	_m.Called(_a0, _a1)
}

// MockEvidencePool_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockEvidencePool_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 State
//   - _a1 types.EvidenceList
func (_e *MockEvidencePool_Expecter) Update(_a0 interface{}, _a1 interface{}) *MockEvidencePool_Update_Call {
	return &MockEvidencePool_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *MockEvidencePool_Update_Call) Run(run func(_a0 State, _a1 types.EvidenceList)) *MockEvidencePool_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(State), args[1].(types.EvidenceList))
	})
	return _c
}

func (_c *MockEvidencePool_Update_Call) Return() *MockEvidencePool_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEvidencePool_Update_Call) RunAndReturn(run func(State, types.EvidenceList)) *MockEvidencePool_Update_Call {
	_c.Run(run)
	return _c
}

// NewMockEvidencePool creates a new instance of MockEvidencePool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvidencePool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvidencePool {
	mock := &MockEvidencePool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
