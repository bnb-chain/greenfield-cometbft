// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/cometbft/cometbft/types"
)

// BlockStore is an autogenerated mock type for the BlockStore type
type BlockStore struct {
	mock.Mock
}

type BlockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *BlockStore) EXPECT() *BlockStore_Expecter {
	return &BlockStore_Expecter{mock: &_m.Mock}
}

// Base provides a mock function with no fields
func (_m *BlockStore) Base() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Base")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// BlockStore_Base_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Base'
type BlockStore_Base_Call struct {
	*mock.Call
}

// Base is a helper method to define mock.On call
func (_e *BlockStore_Expecter) Base() *BlockStore_Base_Call {
	return &BlockStore_Base_Call{Call: _e.mock.On("Base")}
}

func (_c *BlockStore_Base_Call) Run(run func()) *BlockStore_Base_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockStore_Base_Call) Return(_a0 int64) *BlockStore_Base_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_Base_Call) RunAndReturn(run func() int64) *BlockStore_Base_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLatestBlock provides a mock function with no fields
func (_m *BlockStore) DeleteLatestBlock() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteLatestBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockStore_DeleteLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLatestBlock'
type BlockStore_DeleteLatestBlock_Call struct {
	*mock.Call
}

// DeleteLatestBlock is a helper method to define mock.On call
func (_e *BlockStore_Expecter) DeleteLatestBlock() *BlockStore_DeleteLatestBlock_Call {
	return &BlockStore_DeleteLatestBlock_Call{Call: _e.mock.On("DeleteLatestBlock")}
}

func (_c *BlockStore_DeleteLatestBlock_Call) Run(run func()) *BlockStore_DeleteLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockStore_DeleteLatestBlock_Call) Return(_a0 error) *BlockStore_DeleteLatestBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_DeleteLatestBlock_Call) RunAndReturn(run func() error) *BlockStore_DeleteLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLatestBlocks provides a mock function with given fields: n
func (_m *BlockStore) DeleteLatestBlocks(n uint64) error {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLatestBlocks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockStore_DeleteLatestBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLatestBlocks'
type BlockStore_DeleteLatestBlocks_Call struct {
	*mock.Call
}

// DeleteLatestBlocks is a helper method to define mock.On call
//   - n uint64
func (_e *BlockStore_Expecter) DeleteLatestBlocks(n interface{}) *BlockStore_DeleteLatestBlocks_Call {
	return &BlockStore_DeleteLatestBlocks_Call{Call: _e.mock.On("DeleteLatestBlocks", n)}
}

func (_c *BlockStore_DeleteLatestBlocks_Call) Run(run func(n uint64)) *BlockStore_DeleteLatestBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *BlockStore_DeleteLatestBlocks_Call) Return(_a0 error) *BlockStore_DeleteLatestBlocks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_DeleteLatestBlocks_Call) RunAndReturn(run func(uint64) error) *BlockStore_DeleteLatestBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// Height provides a mock function with no fields
func (_m *BlockStore) Height() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Height")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// BlockStore_Height_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Height'
type BlockStore_Height_Call struct {
	*mock.Call
}

// Height is a helper method to define mock.On call
func (_e *BlockStore_Expecter) Height() *BlockStore_Height_Call {
	return &BlockStore_Height_Call{Call: _e.mock.On("Height")}
}

func (_c *BlockStore_Height_Call) Run(run func()) *BlockStore_Height_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockStore_Height_Call) Return(_a0 int64) *BlockStore_Height_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_Height_Call) RunAndReturn(run func() int64) *BlockStore_Height_Call {
	_c.Call.Return(run)
	return _c
}

// LoadBaseMeta provides a mock function with no fields
func (_m *BlockStore) LoadBaseMeta() *types.BlockMeta {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadBaseMeta")
	}

	var r0 *types.BlockMeta
	if rf, ok := ret.Get(0).(func() *types.BlockMeta); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BlockMeta)
		}
	}

	return r0
}

// BlockStore_LoadBaseMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadBaseMeta'
type BlockStore_LoadBaseMeta_Call struct {
	*mock.Call
}

// LoadBaseMeta is a helper method to define mock.On call
func (_e *BlockStore_Expecter) LoadBaseMeta() *BlockStore_LoadBaseMeta_Call {
	return &BlockStore_LoadBaseMeta_Call{Call: _e.mock.On("LoadBaseMeta")}
}

func (_c *BlockStore_LoadBaseMeta_Call) Run(run func()) *BlockStore_LoadBaseMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockStore_LoadBaseMeta_Call) Return(_a0 *types.BlockMeta) *BlockStore_LoadBaseMeta_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_LoadBaseMeta_Call) RunAndReturn(run func() *types.BlockMeta) *BlockStore_LoadBaseMeta_Call {
	_c.Call.Return(run)
	return _c
}

// LoadBlock provides a mock function with given fields: height
func (_m *BlockStore) LoadBlock(height int64) *types.Block {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for LoadBlock")
	}

	var r0 *types.Block
	if rf, ok := ret.Get(0).(func(int64) *types.Block); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	return r0
}

// BlockStore_LoadBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadBlock'
type BlockStore_LoadBlock_Call struct {
	*mock.Call
}

// LoadBlock is a helper method to define mock.On call
//   - height int64
func (_e *BlockStore_Expecter) LoadBlock(height interface{}) *BlockStore_LoadBlock_Call {
	return &BlockStore_LoadBlock_Call{Call: _e.mock.On("LoadBlock", height)}
}

func (_c *BlockStore_LoadBlock_Call) Run(run func(height int64)) *BlockStore_LoadBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *BlockStore_LoadBlock_Call) Return(_a0 *types.Block) *BlockStore_LoadBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_LoadBlock_Call) RunAndReturn(run func(int64) *types.Block) *BlockStore_LoadBlock_Call {
	_c.Call.Return(run)
	return _c
}

// LoadBlockByHash provides a mock function with given fields: hash
func (_m *BlockStore) LoadBlockByHash(hash []byte) *types.Block {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for LoadBlockByHash")
	}

	var r0 *types.Block
	if rf, ok := ret.Get(0).(func([]byte) *types.Block); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	return r0
}

// BlockStore_LoadBlockByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadBlockByHash'
type BlockStore_LoadBlockByHash_Call struct {
	*mock.Call
}

// LoadBlockByHash is a helper method to define mock.On call
//   - hash []byte
func (_e *BlockStore_Expecter) LoadBlockByHash(hash interface{}) *BlockStore_LoadBlockByHash_Call {
	return &BlockStore_LoadBlockByHash_Call{Call: _e.mock.On("LoadBlockByHash", hash)}
}

func (_c *BlockStore_LoadBlockByHash_Call) Run(run func(hash []byte)) *BlockStore_LoadBlockByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BlockStore_LoadBlockByHash_Call) Return(_a0 *types.Block) *BlockStore_LoadBlockByHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_LoadBlockByHash_Call) RunAndReturn(run func([]byte) *types.Block) *BlockStore_LoadBlockByHash_Call {
	_c.Call.Return(run)
	return _c
}

// LoadBlockCommit provides a mock function with given fields: height
func (_m *BlockStore) LoadBlockCommit(height int64) *types.Commit {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for LoadBlockCommit")
	}

	var r0 *types.Commit
	if rf, ok := ret.Get(0).(func(int64) *types.Commit); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Commit)
		}
	}

	return r0
}

// BlockStore_LoadBlockCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadBlockCommit'
type BlockStore_LoadBlockCommit_Call struct {
	*mock.Call
}

// LoadBlockCommit is a helper method to define mock.On call
//   - height int64
func (_e *BlockStore_Expecter) LoadBlockCommit(height interface{}) *BlockStore_LoadBlockCommit_Call {
	return &BlockStore_LoadBlockCommit_Call{Call: _e.mock.On("LoadBlockCommit", height)}
}

func (_c *BlockStore_LoadBlockCommit_Call) Run(run func(height int64)) *BlockStore_LoadBlockCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *BlockStore_LoadBlockCommit_Call) Return(_a0 *types.Commit) *BlockStore_LoadBlockCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_LoadBlockCommit_Call) RunAndReturn(run func(int64) *types.Commit) *BlockStore_LoadBlockCommit_Call {
	_c.Call.Return(run)
	return _c
}

// LoadBlockMeta provides a mock function with given fields: height
func (_m *BlockStore) LoadBlockMeta(height int64) *types.BlockMeta {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for LoadBlockMeta")
	}

	var r0 *types.BlockMeta
	if rf, ok := ret.Get(0).(func(int64) *types.BlockMeta); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BlockMeta)
		}
	}

	return r0
}

// BlockStore_LoadBlockMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadBlockMeta'
type BlockStore_LoadBlockMeta_Call struct {
	*mock.Call
}

// LoadBlockMeta is a helper method to define mock.On call
//   - height int64
func (_e *BlockStore_Expecter) LoadBlockMeta(height interface{}) *BlockStore_LoadBlockMeta_Call {
	return &BlockStore_LoadBlockMeta_Call{Call: _e.mock.On("LoadBlockMeta", height)}
}

func (_c *BlockStore_LoadBlockMeta_Call) Run(run func(height int64)) *BlockStore_LoadBlockMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *BlockStore_LoadBlockMeta_Call) Return(_a0 *types.BlockMeta) *BlockStore_LoadBlockMeta_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_LoadBlockMeta_Call) RunAndReturn(run func(int64) *types.BlockMeta) *BlockStore_LoadBlockMeta_Call {
	_c.Call.Return(run)
	return _c
}

// LoadBlockMetaByHash provides a mock function with given fields: hash
func (_m *BlockStore) LoadBlockMetaByHash(hash []byte) *types.BlockMeta {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for LoadBlockMetaByHash")
	}

	var r0 *types.BlockMeta
	if rf, ok := ret.Get(0).(func([]byte) *types.BlockMeta); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BlockMeta)
		}
	}

	return r0
}

// BlockStore_LoadBlockMetaByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadBlockMetaByHash'
type BlockStore_LoadBlockMetaByHash_Call struct {
	*mock.Call
}

// LoadBlockMetaByHash is a helper method to define mock.On call
//   - hash []byte
func (_e *BlockStore_Expecter) LoadBlockMetaByHash(hash interface{}) *BlockStore_LoadBlockMetaByHash_Call {
	return &BlockStore_LoadBlockMetaByHash_Call{Call: _e.mock.On("LoadBlockMetaByHash", hash)}
}

func (_c *BlockStore_LoadBlockMetaByHash_Call) Run(run func(hash []byte)) *BlockStore_LoadBlockMetaByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BlockStore_LoadBlockMetaByHash_Call) Return(_a0 *types.BlockMeta) *BlockStore_LoadBlockMetaByHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_LoadBlockMetaByHash_Call) RunAndReturn(run func([]byte) *types.BlockMeta) *BlockStore_LoadBlockMetaByHash_Call {
	_c.Call.Return(run)
	return _c
}

// LoadBlockPart provides a mock function with given fields: height, index
func (_m *BlockStore) LoadBlockPart(height int64, index int) *types.Part {
	ret := _m.Called(height, index)

	if len(ret) == 0 {
		panic("no return value specified for LoadBlockPart")
	}

	var r0 *types.Part
	if rf, ok := ret.Get(0).(func(int64, int) *types.Part); ok {
		r0 = rf(height, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Part)
		}
	}

	return r0
}

// BlockStore_LoadBlockPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadBlockPart'
type BlockStore_LoadBlockPart_Call struct {
	*mock.Call
}

// LoadBlockPart is a helper method to define mock.On call
//   - height int64
//   - index int
func (_e *BlockStore_Expecter) LoadBlockPart(height interface{}, index interface{}) *BlockStore_LoadBlockPart_Call {
	return &BlockStore_LoadBlockPart_Call{Call: _e.mock.On("LoadBlockPart", height, index)}
}

func (_c *BlockStore_LoadBlockPart_Call) Run(run func(height int64, index int)) *BlockStore_LoadBlockPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int))
	})
	return _c
}

func (_c *BlockStore_LoadBlockPart_Call) Return(_a0 *types.Part) *BlockStore_LoadBlockPart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_LoadBlockPart_Call) RunAndReturn(run func(int64, int) *types.Part) *BlockStore_LoadBlockPart_Call {
	_c.Call.Return(run)
	return _c
}

// LoadSeenCommit provides a mock function with given fields: height
func (_m *BlockStore) LoadSeenCommit(height int64) *types.Commit {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for LoadSeenCommit")
	}

	var r0 *types.Commit
	if rf, ok := ret.Get(0).(func(int64) *types.Commit); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Commit)
		}
	}

	return r0
}

// BlockStore_LoadSeenCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadSeenCommit'
type BlockStore_LoadSeenCommit_Call struct {
	*mock.Call
}

// LoadSeenCommit is a helper method to define mock.On call
//   - height int64
func (_e *BlockStore_Expecter) LoadSeenCommit(height interface{}) *BlockStore_LoadSeenCommit_Call {
	return &BlockStore_LoadSeenCommit_Call{Call: _e.mock.On("LoadSeenCommit", height)}
}

func (_c *BlockStore_LoadSeenCommit_Call) Run(run func(height int64)) *BlockStore_LoadSeenCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *BlockStore_LoadSeenCommit_Call) Return(_a0 *types.Commit) *BlockStore_LoadSeenCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_LoadSeenCommit_Call) RunAndReturn(run func(int64) *types.Commit) *BlockStore_LoadSeenCommit_Call {
	_c.Call.Return(run)
	return _c
}

// PruneBlocks provides a mock function with given fields: height
func (_m *BlockStore) PruneBlocks(height int64) (uint64, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for PruneBlocks")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (uint64, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(int64) uint64); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockStore_PruneBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneBlocks'
type BlockStore_PruneBlocks_Call struct {
	*mock.Call
}

// PruneBlocks is a helper method to define mock.On call
//   - height int64
func (_e *BlockStore_Expecter) PruneBlocks(height interface{}) *BlockStore_PruneBlocks_Call {
	return &BlockStore_PruneBlocks_Call{Call: _e.mock.On("PruneBlocks", height)}
}

func (_c *BlockStore_PruneBlocks_Call) Run(run func(height int64)) *BlockStore_PruneBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *BlockStore_PruneBlocks_Call) Return(_a0 uint64, _a1 error) *BlockStore_PruneBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockStore_PruneBlocks_Call) RunAndReturn(run func(int64) (uint64, error)) *BlockStore_PruneBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBlock provides a mock function with given fields: block, blockParts, seenCommit
func (_m *BlockStore) SaveBlock(block *types.Block, blockParts *types.PartSet, seenCommit *types.Commit) {
	_m.Called(block, blockParts, seenCommit)
}

// BlockStore_SaveBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBlock'
type BlockStore_SaveBlock_Call struct {
	*mock.Call
}

// SaveBlock is a helper method to define mock.On call
//   - block *types.Block
//   - blockParts *types.PartSet
//   - seenCommit *types.Commit
func (_e *BlockStore_Expecter) SaveBlock(block interface{}, blockParts interface{}, seenCommit interface{}) *BlockStore_SaveBlock_Call {
	return &BlockStore_SaveBlock_Call{Call: _e.mock.On("SaveBlock", block, blockParts, seenCommit)}
}

func (_c *BlockStore_SaveBlock_Call) Run(run func(block *types.Block, blockParts *types.PartSet, seenCommit *types.Commit)) *BlockStore_SaveBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Block), args[1].(*types.PartSet), args[2].(*types.Commit))
	})
	return _c
}

func (_c *BlockStore_SaveBlock_Call) Return() *BlockStore_SaveBlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *BlockStore_SaveBlock_Call) RunAndReturn(run func(*types.Block, *types.PartSet, *types.Commit)) *BlockStore_SaveBlock_Call {
	_c.Run(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *BlockStore) Size() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// BlockStore_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type BlockStore_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *BlockStore_Expecter) Size() *BlockStore_Size_Call {
	return &BlockStore_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *BlockStore_Size_Call) Run(run func()) *BlockStore_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockStore_Size_Call) Return(_a0 int64) *BlockStore_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockStore_Size_Call) RunAndReturn(run func() int64) *BlockStore_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlockStore creates a new instance of BlockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockStore {
	mock := &BlockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
