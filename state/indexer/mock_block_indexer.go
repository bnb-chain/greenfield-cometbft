// Code generated by mockery. DO NOT EDIT.

package indexer

import (
	context "context"

	query "github.com/cometbft/cometbft/libs/pubsub/query"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cometbft/cometbft/types"
)

// MockBlockIndexer is an autogenerated mock type for the BlockIndexer type
type MockBlockIndexer struct {
	mock.Mock
}

type MockBlockIndexer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockIndexer) EXPECT() *MockBlockIndexer_Expecter {
	return &MockBlockIndexer_Expecter{mock: &_m.Mock}
}

// Has provides a mock function with given fields: height
func (_m *MockBlockIndexer) Has(height int64) (bool, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockIndexer_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockBlockIndexer_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - height int64
func (_e *MockBlockIndexer_Expecter) Has(height interface{}) *MockBlockIndexer_Has_Call {
	return &MockBlockIndexer_Has_Call{Call: _e.mock.On("Has", height)}
}

func (_c *MockBlockIndexer_Has_Call) Run(run func(height int64)) *MockBlockIndexer_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockBlockIndexer_Has_Call) Return(_a0 bool, _a1 error) *MockBlockIndexer_Has_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockIndexer_Has_Call) RunAndReturn(run func(int64) (bool, error)) *MockBlockIndexer_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: _a0
func (_m *MockBlockIndexer) Index(_a0 types.EventDataNewBlockHeader) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.EventDataNewBlockHeader) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlockIndexer_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockBlockIndexer_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - _a0 types.EventDataNewBlockHeader
func (_e *MockBlockIndexer_Expecter) Index(_a0 interface{}) *MockBlockIndexer_Index_Call {
	return &MockBlockIndexer_Index_Call{Call: _e.mock.On("Index", _a0)}
}

func (_c *MockBlockIndexer_Index_Call) Run(run func(_a0 types.EventDataNewBlockHeader)) *MockBlockIndexer_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.EventDataNewBlockHeader))
	})
	return _c
}

func (_c *MockBlockIndexer_Index_Call) Return(_a0 error) *MockBlockIndexer_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockIndexer_Index_Call) RunAndReturn(run func(types.EventDataNewBlockHeader) error) *MockBlockIndexer_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, q
func (_m *MockBlockIndexer) Search(ctx context.Context, q *query.Query) ([]int64, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Query) ([]int64, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *query.Query) []int64); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *query.Query) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockIndexer_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockBlockIndexer_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - q *query.Query
func (_e *MockBlockIndexer_Expecter) Search(ctx interface{}, q interface{}) *MockBlockIndexer_Search_Call {
	return &MockBlockIndexer_Search_Call{Call: _e.mock.On("Search", ctx, q)}
}

func (_c *MockBlockIndexer_Search_Call) Run(run func(ctx context.Context, q *query.Query)) *MockBlockIndexer_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*query.Query))
	})
	return _c
}

func (_c *MockBlockIndexer_Search_Call) Return(_a0 []int64, _a1 error) *MockBlockIndexer_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockIndexer_Search_Call) RunAndReturn(run func(context.Context, *query.Query) ([]int64, error)) *MockBlockIndexer_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockIndexer creates a new instance of MockBlockIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockIndexer {
	mock := &MockBlockIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
