// Code generated by mockery. DO NOT EDIT.

package p2p

import (
	log "github.com/cometbft/cometbft/libs/log"
	conn "github.com/cometbft/cometbft/p2p/conn"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// MockPeer is an autogenerated mock type for the Peer type
type MockPeer struct {
	mock.Mock
}

type MockPeer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPeer) EXPECT() *MockPeer_Expecter {
	return &MockPeer_Expecter{mock: &_m.Mock}
}

// CloseConn provides a mock function with no fields
func (_m *MockPeer) CloseConn() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseConn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPeer_CloseConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseConn'
type MockPeer_CloseConn_Call struct {
	*mock.Call
}

// CloseConn is a helper method to define mock.On call
func (_e *MockPeer_Expecter) CloseConn() *MockPeer_CloseConn_Call {
	return &MockPeer_CloseConn_Call{Call: _e.mock.On("CloseConn")}
}

func (_c *MockPeer_CloseConn_Call) Run(run func()) *MockPeer_CloseConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_CloseConn_Call) Return(_a0 error) *MockPeer_CloseConn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_CloseConn_Call) RunAndReturn(run func() error) *MockPeer_CloseConn_Call {
	_c.Call.Return(run)
	return _c
}

// FlushStop provides a mock function with no fields
func (_m *MockPeer) FlushStop() {
	_m.Called()
}

// MockPeer_FlushStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushStop'
type MockPeer_FlushStop_Call struct {
	*mock.Call
}

// FlushStop is a helper method to define mock.On call
func (_e *MockPeer_Expecter) FlushStop() *MockPeer_FlushStop_Call {
	return &MockPeer_FlushStop_Call{Call: _e.mock.On("FlushStop")}
}

func (_c *MockPeer_FlushStop_Call) Run(run func()) *MockPeer_FlushStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_FlushStop_Call) Return() *MockPeer_FlushStop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeer_FlushStop_Call) RunAndReturn(run func()) *MockPeer_FlushStop_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function with given fields: _a0
func (_m *MockPeer) Get(_a0 string) interface{} {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockPeer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPeer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 string
func (_e *MockPeer_Expecter) Get(_a0 interface{}) *MockPeer_Get_Call {
	return &MockPeer_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *MockPeer_Get_Call) Run(run func(_a0 string)) *MockPeer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPeer_Get_Call) Return(_a0 interface{}) *MockPeer_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_Get_Call) RunAndReturn(run func(string) interface{}) *MockPeer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemovalFailed provides a mock function with no fields
func (_m *MockPeer) GetRemovalFailed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRemovalFailed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPeer_GetRemovalFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemovalFailed'
type MockPeer_GetRemovalFailed_Call struct {
	*mock.Call
}

// GetRemovalFailed is a helper method to define mock.On call
func (_e *MockPeer_Expecter) GetRemovalFailed() *MockPeer_GetRemovalFailed_Call {
	return &MockPeer_GetRemovalFailed_Call{Call: _e.mock.On("GetRemovalFailed")}
}

func (_c *MockPeer_GetRemovalFailed_Call) Run(run func()) *MockPeer_GetRemovalFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_GetRemovalFailed_Call) Return(_a0 bool) *MockPeer_GetRemovalFailed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_GetRemovalFailed_Call) RunAndReturn(run func() bool) *MockPeer_GetRemovalFailed_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockPeer) ID() ID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 ID
	if rf, ok := ret.Get(0).(func() ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ID)
	}

	return r0
}

// MockPeer_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockPeer_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockPeer_Expecter) ID() *MockPeer_ID_Call {
	return &MockPeer_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockPeer_ID_Call) Run(run func()) *MockPeer_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_ID_Call) Return(_a0 ID) *MockPeer_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_ID_Call) RunAndReturn(run func() ID) *MockPeer_ID_Call {
	_c.Call.Return(run)
	return _c
}

// IsOutbound provides a mock function with no fields
func (_m *MockPeer) IsOutbound() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsOutbound")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPeer_IsOutbound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOutbound'
type MockPeer_IsOutbound_Call struct {
	*mock.Call
}

// IsOutbound is a helper method to define mock.On call
func (_e *MockPeer_Expecter) IsOutbound() *MockPeer_IsOutbound_Call {
	return &MockPeer_IsOutbound_Call{Call: _e.mock.On("IsOutbound")}
}

func (_c *MockPeer_IsOutbound_Call) Run(run func()) *MockPeer_IsOutbound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_IsOutbound_Call) Return(_a0 bool) *MockPeer_IsOutbound_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_IsOutbound_Call) RunAndReturn(run func() bool) *MockPeer_IsOutbound_Call {
	_c.Call.Return(run)
	return _c
}

// IsPersistent provides a mock function with no fields
func (_m *MockPeer) IsPersistent() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPersistent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPeer_IsPersistent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPersistent'
type MockPeer_IsPersistent_Call struct {
	*mock.Call
}

// IsPersistent is a helper method to define mock.On call
func (_e *MockPeer_Expecter) IsPersistent() *MockPeer_IsPersistent_Call {
	return &MockPeer_IsPersistent_Call{Call: _e.mock.On("IsPersistent")}
}

func (_c *MockPeer_IsPersistent_Call) Run(run func()) *MockPeer_IsPersistent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_IsPersistent_Call) Return(_a0 bool) *MockPeer_IsPersistent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_IsPersistent_Call) RunAndReturn(run func() bool) *MockPeer_IsPersistent_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function with no fields
func (_m *MockPeer) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPeer_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockPeer_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockPeer_Expecter) IsRunning() *MockPeer_IsRunning_Call {
	return &MockPeer_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockPeer_IsRunning_Call) Run(run func()) *MockPeer_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_IsRunning_Call) Return(_a0 bool) *MockPeer_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_IsRunning_Call) RunAndReturn(run func() bool) *MockPeer_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// NodeInfo provides a mock function with no fields
func (_m *MockPeer) NodeInfo() NodeInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeInfo")
	}

	var r0 NodeInfo
	if rf, ok := ret.Get(0).(func() NodeInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(NodeInfo)
		}
	}

	return r0
}

// MockPeer_NodeInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeInfo'
type MockPeer_NodeInfo_Call struct {
	*mock.Call
}

// NodeInfo is a helper method to define mock.On call
func (_e *MockPeer_Expecter) NodeInfo() *MockPeer_NodeInfo_Call {
	return &MockPeer_NodeInfo_Call{Call: _e.mock.On("NodeInfo")}
}

func (_c *MockPeer_NodeInfo_Call) Run(run func()) *MockPeer_NodeInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_NodeInfo_Call) Return(_a0 NodeInfo) *MockPeer_NodeInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_NodeInfo_Call) RunAndReturn(run func() NodeInfo) *MockPeer_NodeInfo_Call {
	_c.Call.Return(run)
	return _c
}

// OnReset provides a mock function with no fields
func (_m *MockPeer) OnReset() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OnReset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPeer_OnReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReset'
type MockPeer_OnReset_Call struct {
	*mock.Call
}

// OnReset is a helper method to define mock.On call
func (_e *MockPeer_Expecter) OnReset() *MockPeer_OnReset_Call {
	return &MockPeer_OnReset_Call{Call: _e.mock.On("OnReset")}
}

func (_c *MockPeer_OnReset_Call) Run(run func()) *MockPeer_OnReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_OnReset_Call) Return(_a0 error) *MockPeer_OnReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_OnReset_Call) RunAndReturn(run func() error) *MockPeer_OnReset_Call {
	_c.Call.Return(run)
	return _c
}

// OnStart provides a mock function with no fields
func (_m *MockPeer) OnStart() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OnStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPeer_OnStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnStart'
type MockPeer_OnStart_Call struct {
	*mock.Call
}

// OnStart is a helper method to define mock.On call
func (_e *MockPeer_Expecter) OnStart() *MockPeer_OnStart_Call {
	return &MockPeer_OnStart_Call{Call: _e.mock.On("OnStart")}
}

func (_c *MockPeer_OnStart_Call) Run(run func()) *MockPeer_OnStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_OnStart_Call) Return(_a0 error) *MockPeer_OnStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_OnStart_Call) RunAndReturn(run func() error) *MockPeer_OnStart_Call {
	_c.Call.Return(run)
	return _c
}

// OnStop provides a mock function with no fields
func (_m *MockPeer) OnStop() {
	_m.Called()
}

// MockPeer_OnStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnStop'
type MockPeer_OnStop_Call struct {
	*mock.Call
}

// OnStop is a helper method to define mock.On call
func (_e *MockPeer_Expecter) OnStop() *MockPeer_OnStop_Call {
	return &MockPeer_OnStop_Call{Call: _e.mock.On("OnStop")}
}

func (_c *MockPeer_OnStop_Call) Run(run func()) *MockPeer_OnStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_OnStop_Call) Return() *MockPeer_OnStop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeer_OnStop_Call) RunAndReturn(run func()) *MockPeer_OnStop_Call {
	_c.Run(run)
	return _c
}

// Quit provides a mock function with no fields
func (_m *MockPeer) Quit() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Quit")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockPeer_Quit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Quit'
type MockPeer_Quit_Call struct {
	*mock.Call
}

// Quit is a helper method to define mock.On call
func (_e *MockPeer_Expecter) Quit() *MockPeer_Quit_Call {
	return &MockPeer_Quit_Call{Call: _e.mock.On("Quit")}
}

func (_c *MockPeer_Quit_Call) Run(run func()) *MockPeer_Quit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_Quit_Call) Return(_a0 <-chan struct{}) *MockPeer_Quit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_Quit_Call) RunAndReturn(run func() <-chan struct{}) *MockPeer_Quit_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteAddr provides a mock function with no fields
func (_m *MockPeer) RemoteAddr() net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteAddr")
	}

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// MockPeer_RemoteAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteAddr'
type MockPeer_RemoteAddr_Call struct {
	*mock.Call
}

// RemoteAddr is a helper method to define mock.On call
func (_e *MockPeer_Expecter) RemoteAddr() *MockPeer_RemoteAddr_Call {
	return &MockPeer_RemoteAddr_Call{Call: _e.mock.On("RemoteAddr")}
}

func (_c *MockPeer_RemoteAddr_Call) Run(run func()) *MockPeer_RemoteAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_RemoteAddr_Call) Return(_a0 net.Addr) *MockPeer_RemoteAddr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_RemoteAddr_Call) RunAndReturn(run func() net.Addr) *MockPeer_RemoteAddr_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteIP provides a mock function with no fields
func (_m *MockPeer) RemoteIP() net.IP {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteIP")
	}

	var r0 net.IP
	if rf, ok := ret.Get(0).(func() net.IP); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.IP)
		}
	}

	return r0
}

// MockPeer_RemoteIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteIP'
type MockPeer_RemoteIP_Call struct {
	*mock.Call
}

// RemoteIP is a helper method to define mock.On call
func (_e *MockPeer_Expecter) RemoteIP() *MockPeer_RemoteIP_Call {
	return &MockPeer_RemoteIP_Call{Call: _e.mock.On("RemoteIP")}
}

func (_c *MockPeer_RemoteIP_Call) Run(run func()) *MockPeer_RemoteIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_RemoteIP_Call) Return(_a0 net.IP) *MockPeer_RemoteIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_RemoteIP_Call) RunAndReturn(run func() net.IP) *MockPeer_RemoteIP_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with no fields
func (_m *MockPeer) Reset() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPeer_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockPeer_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockPeer_Expecter) Reset() *MockPeer_Reset_Call {
	return &MockPeer_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockPeer_Reset_Call) Run(run func()) *MockPeer_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_Reset_Call) Return(_a0 error) *MockPeer_Reset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_Reset_Call) RunAndReturn(run func() error) *MockPeer_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// SendEnvelope provides a mock function with given fields: _a0
func (_m *MockPeer) SendEnvelope(_a0 Envelope) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendEnvelope")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(Envelope) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPeer_SendEnvelope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEnvelope'
type MockPeer_SendEnvelope_Call struct {
	*mock.Call
}

// SendEnvelope is a helper method to define mock.On call
//   - _a0 Envelope
func (_e *MockPeer_Expecter) SendEnvelope(_a0 interface{}) *MockPeer_SendEnvelope_Call {
	return &MockPeer_SendEnvelope_Call{Call: _e.mock.On("SendEnvelope", _a0)}
}

func (_c *MockPeer_SendEnvelope_Call) Run(run func(_a0 Envelope)) *MockPeer_SendEnvelope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Envelope))
	})
	return _c
}

func (_c *MockPeer_SendEnvelope_Call) Return(_a0 bool) *MockPeer_SendEnvelope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_SendEnvelope_Call) RunAndReturn(run func(Envelope) bool) *MockPeer_SendEnvelope_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: _a0, _a1
func (_m *MockPeer) Set(_a0 string, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// MockPeer_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockPeer_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - _a0 string
//   - _a1 interface{}
func (_e *MockPeer_Expecter) Set(_a0 interface{}, _a1 interface{}) *MockPeer_Set_Call {
	return &MockPeer_Set_Call{Call: _e.mock.On("Set", _a0, _a1)}
}

func (_c *MockPeer_Set_Call) Run(run func(_a0 string, _a1 interface{})) *MockPeer_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockPeer_Set_Call) Return() *MockPeer_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeer_Set_Call) RunAndReturn(run func(string, interface{})) *MockPeer_Set_Call {
	_c.Run(run)
	return _c
}

// SetLogger provides a mock function with given fields: _a0
func (_m *MockPeer) SetLogger(_a0 log.Logger) {
	_m.Called(_a0)
}

// MockPeer_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type MockPeer_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - _a0 log.Logger
func (_e *MockPeer_Expecter) SetLogger(_a0 interface{}) *MockPeer_SetLogger_Call {
	return &MockPeer_SetLogger_Call{Call: _e.mock.On("SetLogger", _a0)}
}

func (_c *MockPeer_SetLogger_Call) Run(run func(_a0 log.Logger)) *MockPeer_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.Logger))
	})
	return _c
}

func (_c *MockPeer_SetLogger_Call) Return() *MockPeer_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeer_SetLogger_Call) RunAndReturn(run func(log.Logger)) *MockPeer_SetLogger_Call {
	_c.Run(run)
	return _c
}

// SetRemovalFailed provides a mock function with no fields
func (_m *MockPeer) SetRemovalFailed() {
	_m.Called()
}

// MockPeer_SetRemovalFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRemovalFailed'
type MockPeer_SetRemovalFailed_Call struct {
	*mock.Call
}

// SetRemovalFailed is a helper method to define mock.On call
func (_e *MockPeer_Expecter) SetRemovalFailed() *MockPeer_SetRemovalFailed_Call {
	return &MockPeer_SetRemovalFailed_Call{Call: _e.mock.On("SetRemovalFailed")}
}

func (_c *MockPeer_SetRemovalFailed_Call) Run(run func()) *MockPeer_SetRemovalFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_SetRemovalFailed_Call) Return() *MockPeer_SetRemovalFailed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPeer_SetRemovalFailed_Call) RunAndReturn(run func()) *MockPeer_SetRemovalFailed_Call {
	_c.Run(run)
	return _c
}

// SocketAddr provides a mock function with no fields
func (_m *MockPeer) SocketAddr() *NetAddress {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SocketAddr")
	}

	var r0 *NetAddress
	if rf, ok := ret.Get(0).(func() *NetAddress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NetAddress)
		}
	}

	return r0
}

// MockPeer_SocketAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SocketAddr'
type MockPeer_SocketAddr_Call struct {
	*mock.Call
}

// SocketAddr is a helper method to define mock.On call
func (_e *MockPeer_Expecter) SocketAddr() *MockPeer_SocketAddr_Call {
	return &MockPeer_SocketAddr_Call{Call: _e.mock.On("SocketAddr")}
}

func (_c *MockPeer_SocketAddr_Call) Run(run func()) *MockPeer_SocketAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_SocketAddr_Call) Return(_a0 *NetAddress) *MockPeer_SocketAddr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_SocketAddr_Call) RunAndReturn(run func() *NetAddress) *MockPeer_SocketAddr_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockPeer) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPeer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockPeer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockPeer_Expecter) Start() *MockPeer_Start_Call {
	return &MockPeer_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockPeer_Start_Call) Run(run func()) *MockPeer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_Start_Call) Return(_a0 error) *MockPeer_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_Start_Call) RunAndReturn(run func() error) *MockPeer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with no fields
func (_m *MockPeer) Status() conn.ConnectionStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 conn.ConnectionStatus
	if rf, ok := ret.Get(0).(func() conn.ConnectionStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(conn.ConnectionStatus)
	}

	return r0
}

// MockPeer_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockPeer_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockPeer_Expecter) Status() *MockPeer_Status_Call {
	return &MockPeer_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockPeer_Status_Call) Run(run func()) *MockPeer_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_Status_Call) Return(_a0 conn.ConnectionStatus) *MockPeer_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_Status_Call) RunAndReturn(run func() conn.ConnectionStatus) *MockPeer_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockPeer) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPeer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockPeer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockPeer_Expecter) Stop() *MockPeer_Stop_Call {
	return &MockPeer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockPeer_Stop_Call) Run(run func()) *MockPeer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_Stop_Call) Return(_a0 error) *MockPeer_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_Stop_Call) RunAndReturn(run func() error) *MockPeer_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockPeer) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPeer_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockPeer_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockPeer_Expecter) String() *MockPeer_String_Call {
	return &MockPeer_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockPeer_String_Call) Run(run func()) *MockPeer_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPeer_String_Call) Return(_a0 string) *MockPeer_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_String_Call) RunAndReturn(run func() string) *MockPeer_String_Call {
	_c.Call.Return(run)
	return _c
}

// TrySendEnvelope provides a mock function with given fields: _a0
func (_m *MockPeer) TrySendEnvelope(_a0 Envelope) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for TrySendEnvelope")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(Envelope) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPeer_TrySendEnvelope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrySendEnvelope'
type MockPeer_TrySendEnvelope_Call struct {
	*mock.Call
}

// TrySendEnvelope is a helper method to define mock.On call
//   - _a0 Envelope
func (_e *MockPeer_Expecter) TrySendEnvelope(_a0 interface{}) *MockPeer_TrySendEnvelope_Call {
	return &MockPeer_TrySendEnvelope_Call{Call: _e.mock.On("TrySendEnvelope", _a0)}
}

func (_c *MockPeer_TrySendEnvelope_Call) Run(run func(_a0 Envelope)) *MockPeer_TrySendEnvelope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Envelope))
	})
	return _c
}

func (_c *MockPeer_TrySendEnvelope_Call) Return(_a0 bool) *MockPeer_TrySendEnvelope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPeer_TrySendEnvelope_Call) RunAndReturn(run func(Envelope) bool) *MockPeer_TrySendEnvelope_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPeer creates a new instance of MockPeer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPeer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPeer {
	mock := &MockPeer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
